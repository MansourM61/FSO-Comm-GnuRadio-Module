# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_FSO_Comm_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_FSO_Comm_swig')
    _FSO_Comm_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_FSO_Comm_swig', [dirname(__file__)])
        except ImportError:
            import _FSO_Comm_swig
            return _FSO_Comm_swig
        try:
            _mod = imp.load_module('_FSO_Comm_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _FSO_Comm_swig = swig_import_helper()
    del swig_import_helper
else:
    import _FSO_Comm_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
    """high_res_timer_now() -> gr::high_res_timer_type"""
    return _FSO_Comm_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
    """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _FSO_Comm_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
    """high_res_timer_tps() -> gr::high_res_timer_type"""
    return _FSO_Comm_swig.high_res_timer_tps()

def high_res_timer_epoch():
    """high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _FSO_Comm_swig.high_res_timer_epoch()
class Channel_Analyser_ff(object):
    """
    FSO Channel Analyser.

    Use this block alongside an on-off keying (OOK) pulse sequence as the source to estimate Q-factor, and scintillation indices for levels '0' and '1' of FSO channel. It is also possible to use a constant optical intensity and measure scintillation index for average level.

    Constructor Specific Documentation:

    Make a Channel Analyser block.

    Args:
        mode : mode of estimation, true = use a constant optical intensity as the source, false = use a random OOK pulse sequence
        ChunkSize : required number of pulses in each iteration to calculate the outputs (number of pulses)
        SamplingOffset : offset index of sampling point from the centre of OOK pulse (+/- offset)
        BandWidth : bandwidth of generated OOK pulse (Hz)
        SampRate : sample rate of the signal (samples per second)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(mode, ChunkSize, SamplingOffset, BandWidth, SampRate):
        """
        make(bool mode, int ChunkSize, int SamplingOffset, float BandWidth, float SampRate) -> Channel_Analyser_ff_sptr

        FSO Channel Analyser.

        Use this block alongside an on-off keying (OOK) pulse sequence as the source to estimate Q-factor, and scintillation indices for levels '0' and '1' of FSO channel. It is also possible to use a constant optical intensity and measure scintillation index for average level.

        Constructor Specific Documentation:

        Make a Channel Analyser block.

        Args:
            mode : mode of estimation, true = use a constant optical intensity as the source, false = use a random OOK pulse sequence
            ChunkSize : required number of pulses in each iteration to calculate the outputs (number of pulses)
            SamplingOffset : offset index of sampling point from the centre of OOK pulse (+/- offset)
            BandWidth : bandwidth of generated OOK pulse (Hz)
            SampRate : sample rate of the signal (samples per second)
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_make(mode, ChunkSize, SamplingOffset, BandWidth, SampRate)

    make = staticmethod(make)

    def set_mode(self, mode):
        """
        set_mode(Channel_Analyser_ff self, bool mode)

        Set channel analyser mode.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_set_mode(self, mode)


    def mode(self):
        """
        mode(Channel_Analyser_ff self) -> bool

        Return current channel analyser mode.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_mode(self)


    def set_ChunkSize(self, ChunkSize):
        """
        set_ChunkSize(Channel_Analyser_ff self, unsigned int ChunkSize)

        Set channel analyser chunk size.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_set_ChunkSize(self, ChunkSize)


    def ChunkSize(self):
        """
        ChunkSize(Channel_Analyser_ff self) -> unsigned int

        Return current channel analyser chunk size.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_ChunkSize(self)


    def set_SamplingOffset(self, SamplingOffset):
        """
        set_SamplingOffset(Channel_Analyser_ff self, int SamplingOffset)

        Set channel analyser sampling offset.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_set_SamplingOffset(self, SamplingOffset)


    def SamplingOffset(self):
        """
        SamplingOffset(Channel_Analyser_ff self) -> int

        Return current channel analyser sampling offset.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_SamplingOffset(self)


    def set_BandWidth(self, BandWidth):
        """
        set_BandWidth(Channel_Analyser_ff self, float BandWidth)

        Set channel analyser bandwidth.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_set_BandWidth(self, BandWidth)


    def BandWidth(self):
        """
        BandWidth(Channel_Analyser_ff self) -> float

        Return current channel analyser bandwidth.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_BandWidth(self)


    def set_SampRate(self, SampRate):
        """
        set_SampRate(Channel_Analyser_ff self, float SampRate)

        Set channel analyser sampling rate.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_set_SampRate(self, SampRate)


    def SampRate(self):
        """
        SampRate(Channel_Analyser_ff self) -> float

        Return current channel analyser sampling rate.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_SampRate(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Channel_Analyser_ff
    __del__ = lambda self: None
Channel_Analyser_ff_swigregister = _FSO_Comm_swig.Channel_Analyser_ff_swigregister
Channel_Analyser_ff_swigregister(Channel_Analyser_ff)

def Channel_Analyser_ff_make(mode, ChunkSize, SamplingOffset, BandWidth, SampRate):
    """
    Channel_Analyser_ff_make(bool mode, int ChunkSize, int SamplingOffset, float BandWidth, float SampRate) -> Channel_Analyser_ff_sptr

    FSO Channel Analyser.

    Use this block alongside an on-off keying (OOK) pulse sequence as the source to estimate Q-factor, and scintillation indices for levels '0' and '1' of FSO channel. It is also possible to use a constant optical intensity and measure scintillation index for average level.

    Constructor Specific Documentation:

    Make a Channel Analyser block.

    Args:
        mode : mode of estimation, true = use a constant optical intensity as the source, false = use a random OOK pulse sequence
        ChunkSize : required number of pulses in each iteration to calculate the outputs (number of pulses)
        SamplingOffset : offset index of sampling point from the centre of OOK pulse (+/- offset)
        BandWidth : bandwidth of generated OOK pulse (Hz)
        SampRate : sample rate of the signal (samples per second)
    """
    return _FSO_Comm_swig.Channel_Analyser_ff_make(mode, ChunkSize, SamplingOffset, BandWidth, SampRate)

class Channel_Analyser_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::FSO_Comm::Channel_Analyser_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::FSO_Comm::Channel_Analyser_ff)> self) -> Channel_Analyser_ff_sptr
        __init__(boost::shared_ptr<(gr::FSO_Comm::Channel_Analyser_ff)> self, Channel_Analyser_ff p) -> Channel_Analyser_ff_sptr
        """
        this = _FSO_Comm_swig.new_Channel_Analyser_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Channel_Analyser_ff_sptr self) -> Channel_Analyser_ff"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr___deref__(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Channel_Analyser_ff_sptr
    __del__ = lambda self: None

    def make(self, mode, ChunkSize, SamplingOffset, BandWidth, SampRate):
        """
        make(Channel_Analyser_ff_sptr self, bool mode, int ChunkSize, int SamplingOffset, float BandWidth, float SampRate) -> Channel_Analyser_ff_sptr

        FSO Channel Analyser.

        Use this block alongside an on-off keying (OOK) pulse sequence as the source to estimate Q-factor, and scintillation indices for levels '0' and '1' of FSO channel. It is also possible to use a constant optical intensity and measure scintillation index for average level.

        Constructor Specific Documentation:

        Make a Channel Analyser block.

        Args:
            mode : mode of estimation, true = use a constant optical intensity as the source, false = use a random OOK pulse sequence
            ChunkSize : required number of pulses in each iteration to calculate the outputs (number of pulses)
            SamplingOffset : offset index of sampling point from the centre of OOK pulse (+/- offset)
            BandWidth : bandwidth of generated OOK pulse (Hz)
            SampRate : sample rate of the signal (samples per second)
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_make(self, mode, ChunkSize, SamplingOffset, BandWidth, SampRate)


    def set_mode(self, mode):
        """
        set_mode(Channel_Analyser_ff_sptr self, bool mode)

        Set channel analyser mode.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_mode(self, mode)


    def mode(self):
        """
        mode(Channel_Analyser_ff_sptr self) -> bool

        Return current channel analyser mode.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_mode(self)


    def set_ChunkSize(self, ChunkSize):
        """
        set_ChunkSize(Channel_Analyser_ff_sptr self, unsigned int ChunkSize)

        Set channel analyser chunk size.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_ChunkSize(self, ChunkSize)


    def ChunkSize(self):
        """
        ChunkSize(Channel_Analyser_ff_sptr self) -> unsigned int

        Return current channel analyser chunk size.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_ChunkSize(self)


    def set_SamplingOffset(self, SamplingOffset):
        """
        set_SamplingOffset(Channel_Analyser_ff_sptr self, int SamplingOffset)

        Set channel analyser sampling offset.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_SamplingOffset(self, SamplingOffset)


    def SamplingOffset(self):
        """
        SamplingOffset(Channel_Analyser_ff_sptr self) -> int

        Return current channel analyser sampling offset.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_SamplingOffset(self)


    def set_BandWidth(self, BandWidth):
        """
        set_BandWidth(Channel_Analyser_ff_sptr self, float BandWidth)

        Set channel analyser bandwidth.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_BandWidth(self, BandWidth)


    def BandWidth(self):
        """
        BandWidth(Channel_Analyser_ff_sptr self) -> float

        Return current channel analyser bandwidth.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_BandWidth(self)


    def set_SampRate(self, SampRate):
        """
        set_SampRate(Channel_Analyser_ff_sptr self, float SampRate)

        Set channel analyser sampling rate.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_SampRate(self, SampRate)


    def SampRate(self):
        """
        SampRate(Channel_Analyser_ff_sptr self) -> float

        Return current channel analyser sampling rate.
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_SampRate(self)


    def history(self):
        """history(Channel_Analyser_ff_sptr self) -> unsigned int"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Channel_Analyser_ff_sptr self, int which, int delay)
        declare_sample_delay(Channel_Analyser_ff_sptr self, unsigned int delay)
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Channel_Analyser_ff_sptr self, int which) -> unsigned int"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Channel_Analyser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Channel_Analyser_ff_sptr self) -> double"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_relative_rate(self)


    def start(self):
        """start(Channel_Analyser_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_start(self)


    def stop(self):
        """stop(Channel_Analyser_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Channel_Analyser_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Channel_Analyser_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Channel_Analyser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Channel_Analyser_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Channel_Analyser_ff_sptr self)"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Channel_Analyser_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Channel_Analyser_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Channel_Analyser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Channel_Analyser_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Channel_Analyser_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(Channel_Analyser_ff_sptr self, int port, long max_output_buffer)
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Channel_Analyser_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Channel_Analyser_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(Channel_Analyser_ff_sptr self, int port, long min_output_buffer)
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Channel_Analyser_ff_sptr self, int which) -> float
        pc_input_buffers_full(Channel_Analyser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Channel_Analyser_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(Channel_Analyser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Channel_Analyser_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(Channel_Analyser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Channel_Analyser_ff_sptr self, int which) -> float
        pc_output_buffers_full(Channel_Analyser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Channel_Analyser_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(Channel_Analyser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Channel_Analyser_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(Channel_Analyser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Channel_Analyser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Channel_Analyser_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Channel_Analyser_ff_sptr self)"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Channel_Analyser_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Channel_Analyser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Channel_Analyser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Channel_Analyser_ff_sptr self, int priority) -> int"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Channel_Analyser_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Channel_Analyser_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Channel_Analyser_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Channel_Analyser_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Channel_Analyser_ff_sptr self) -> long"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Channel_Analyser_ff_sptr self) -> basic_block_sptr"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Channel_Analyser_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Channel_Analyser_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Channel_Analyser_ff_sptr self, std::string name)"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Channel_Analyser_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Channel_Analyser_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Channel_Analyser_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Channel_Analyser_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _FSO_Comm_swig.Channel_Analyser_ff_sptr_message_subscribers(self, which_port)

Channel_Analyser_ff_sptr_swigregister = _FSO_Comm_swig.Channel_Analyser_ff_sptr_swigregister
Channel_Analyser_ff_sptr_swigregister(Channel_Analyser_ff_sptr)


Channel_Analyser_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Channel_Analyser_ff = Channel_Analyser_ff.make;

class Geometric_Loss_ff(object):
    """
    Geometric Loss in FSO Channel.

    Using geometric optics, the beam propagation loss is estimated for given beam properties.

    Constructor Specific Documentation:

    Make a geometric loss block.

    Args:
        Tx_Dia : transmitter aperture diameter (m)
        Tx_DivAng : transmitter half-angle beam divergence (Deg)
        LinkLen : FSO channel link length (m)
        Rx_Dia : receiver aperture diameter (m)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(Tx_Dia, Tx_DivAng, LinkLen, Rx_Dia):
        """
        make(float Tx_Dia, float Tx_DivAng, float LinkLen, float Rx_Dia) -> Geometric_Loss_ff_sptr

        Geometric Loss in FSO Channel.

        Using geometric optics, the beam propagation loss is estimated for given beam properties.

        Constructor Specific Documentation:

        Make a geometric loss block.

        Args:
            Tx_Dia : transmitter aperture diameter (m)
            Tx_DivAng : transmitter half-angle beam divergence (Deg)
            LinkLen : FSO channel link length (m)
            Rx_Dia : receiver aperture diameter (m)
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_make(Tx_Dia, Tx_DivAng, LinkLen, Rx_Dia)

    make = staticmethod(make)

    def set_Tx_Dia(self, Tx_Dia):
        """
        set_Tx_Dia(Geometric_Loss_ff self, float Tx_Dia)

        Set geometric loss transmitter aperture diameter.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_set_Tx_Dia(self, Tx_Dia)


    def Tx_Dia(self):
        """
        Tx_Dia(Geometric_Loss_ff self) -> float

        Return current geometric loss transmitter aperture diameter.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_Tx_Dia(self)


    def set_Tx_DivAng(self, Tx_DivAng):
        """
        set_Tx_DivAng(Geometric_Loss_ff self, float Tx_DivAng)

        Set geometric loss transmitter full-angle divergence angle.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_set_Tx_DivAng(self, Tx_DivAng)


    def Tx_DivAng(self):
        """
        Tx_DivAng(Geometric_Loss_ff self) -> float

        Return current geometric loss transmitter full-angle divergence angle.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_Tx_DivAng(self)


    def set_LinkLen(self, LinkLen):
        """
        set_LinkLen(Geometric_Loss_ff self, float LinkLen)

        Set geometric loss transmitter link length.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_set_LinkLen(self, LinkLen)


    def LinkLen(self):
        """
        LinkLen(Geometric_Loss_ff self) -> float

        Return current geometric loss transmitter link length.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_LinkLen(self)


    def set_Rx_Dia(self, Rx_Dia):
        """
        set_Rx_Dia(Geometric_Loss_ff self, float Rx_Dia)

        Set geometric loss receiver aperture diameter.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_set_Rx_Dia(self, Rx_Dia)


    def Rx_Dia(self):
        """
        Rx_Dia(Geometric_Loss_ff self) -> float

        Return cyurrent geometric loss receiver aperture diameter.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_Rx_Dia(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Geometric_Loss_ff
    __del__ = lambda self: None
Geometric_Loss_ff_swigregister = _FSO_Comm_swig.Geometric_Loss_ff_swigregister
Geometric_Loss_ff_swigregister(Geometric_Loss_ff)

def Geometric_Loss_ff_make(Tx_Dia, Tx_DivAng, LinkLen, Rx_Dia):
    """
    Geometric_Loss_ff_make(float Tx_Dia, float Tx_DivAng, float LinkLen, float Rx_Dia) -> Geometric_Loss_ff_sptr

    Geometric Loss in FSO Channel.

    Using geometric optics, the beam propagation loss is estimated for given beam properties.

    Constructor Specific Documentation:

    Make a geometric loss block.

    Args:
        Tx_Dia : transmitter aperture diameter (m)
        Tx_DivAng : transmitter half-angle beam divergence (Deg)
        LinkLen : FSO channel link length (m)
        Rx_Dia : receiver aperture diameter (m)
    """
    return _FSO_Comm_swig.Geometric_Loss_ff_make(Tx_Dia, Tx_DivAng, LinkLen, Rx_Dia)

class Geometric_Loss_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::FSO_Comm::Geometric_Loss_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::FSO_Comm::Geometric_Loss_ff)> self) -> Geometric_Loss_ff_sptr
        __init__(boost::shared_ptr<(gr::FSO_Comm::Geometric_Loss_ff)> self, Geometric_Loss_ff p) -> Geometric_Loss_ff_sptr
        """
        this = _FSO_Comm_swig.new_Geometric_Loss_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Geometric_Loss_ff_sptr self) -> Geometric_Loss_ff"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr___deref__(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Geometric_Loss_ff_sptr
    __del__ = lambda self: None

    def make(self, Tx_Dia, Tx_DivAng, LinkLen, Rx_Dia):
        """
        make(Geometric_Loss_ff_sptr self, float Tx_Dia, float Tx_DivAng, float LinkLen, float Rx_Dia) -> Geometric_Loss_ff_sptr

        Geometric Loss in FSO Channel.

        Using geometric optics, the beam propagation loss is estimated for given beam properties.

        Constructor Specific Documentation:

        Make a geometric loss block.

        Args:
            Tx_Dia : transmitter aperture diameter (m)
            Tx_DivAng : transmitter half-angle beam divergence (Deg)
            LinkLen : FSO channel link length (m)
            Rx_Dia : receiver aperture diameter (m)
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_make(self, Tx_Dia, Tx_DivAng, LinkLen, Rx_Dia)


    def set_Tx_Dia(self, Tx_Dia):
        """
        set_Tx_Dia(Geometric_Loss_ff_sptr self, float Tx_Dia)

        Set geometric loss transmitter aperture diameter.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_Tx_Dia(self, Tx_Dia)


    def Tx_Dia(self):
        """
        Tx_Dia(Geometric_Loss_ff_sptr self) -> float

        Return current geometric loss transmitter aperture diameter.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_Tx_Dia(self)


    def set_Tx_DivAng(self, Tx_DivAng):
        """
        set_Tx_DivAng(Geometric_Loss_ff_sptr self, float Tx_DivAng)

        Set geometric loss transmitter full-angle divergence angle.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_Tx_DivAng(self, Tx_DivAng)


    def Tx_DivAng(self):
        """
        Tx_DivAng(Geometric_Loss_ff_sptr self) -> float

        Return current geometric loss transmitter full-angle divergence angle.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_Tx_DivAng(self)


    def set_LinkLen(self, LinkLen):
        """
        set_LinkLen(Geometric_Loss_ff_sptr self, float LinkLen)

        Set geometric loss transmitter link length.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_LinkLen(self, LinkLen)


    def LinkLen(self):
        """
        LinkLen(Geometric_Loss_ff_sptr self) -> float

        Return current geometric loss transmitter link length.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_LinkLen(self)


    def set_Rx_Dia(self, Rx_Dia):
        """
        set_Rx_Dia(Geometric_Loss_ff_sptr self, float Rx_Dia)

        Set geometric loss receiver aperture diameter.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_Rx_Dia(self, Rx_Dia)


    def Rx_Dia(self):
        """
        Rx_Dia(Geometric_Loss_ff_sptr self) -> float

        Return cyurrent geometric loss receiver aperture diameter.
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_Rx_Dia(self)


    def history(self):
        """history(Geometric_Loss_ff_sptr self) -> unsigned int"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Geometric_Loss_ff_sptr self, int which, int delay)
        declare_sample_delay(Geometric_Loss_ff_sptr self, unsigned int delay)
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Geometric_Loss_ff_sptr self, int which) -> unsigned int"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Geometric_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Geometric_Loss_ff_sptr self) -> double"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_relative_rate(self)


    def start(self):
        """start(Geometric_Loss_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_start(self)


    def stop(self):
        """stop(Geometric_Loss_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Geometric_Loss_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Geometric_Loss_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Geometric_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Geometric_Loss_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Geometric_Loss_ff_sptr self)"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Geometric_Loss_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Geometric_Loss_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Geometric_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Geometric_Loss_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Geometric_Loss_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(Geometric_Loss_ff_sptr self, int port, long max_output_buffer)
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Geometric_Loss_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Geometric_Loss_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(Geometric_Loss_ff_sptr self, int port, long min_output_buffer)
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Geometric_Loss_ff_sptr self, int which) -> float
        pc_input_buffers_full(Geometric_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Geometric_Loss_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(Geometric_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Geometric_Loss_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(Geometric_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Geometric_Loss_ff_sptr self, int which) -> float
        pc_output_buffers_full(Geometric_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Geometric_Loss_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(Geometric_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Geometric_Loss_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(Geometric_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Geometric_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Geometric_Loss_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Geometric_Loss_ff_sptr self)"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Geometric_Loss_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Geometric_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Geometric_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Geometric_Loss_ff_sptr self, int priority) -> int"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Geometric_Loss_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Geometric_Loss_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Geometric_Loss_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Geometric_Loss_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Geometric_Loss_ff_sptr self) -> long"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Geometric_Loss_ff_sptr self) -> basic_block_sptr"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Geometric_Loss_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Geometric_Loss_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Geometric_Loss_ff_sptr self, std::string name)"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Geometric_Loss_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Geometric_Loss_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Geometric_Loss_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Geometric_Loss_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _FSO_Comm_swig.Geometric_Loss_ff_sptr_message_subscribers(self, which_port)

Geometric_Loss_ff_sptr_swigregister = _FSO_Comm_swig.Geometric_Loss_ff_sptr_swigregister
Geometric_Loss_ff_sptr_swigregister(Geometric_Loss_ff_sptr)


Geometric_Loss_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Geometric_Loss_ff = Geometric_Loss_ff.make;

class Laser_ff(object):
    """
    FSO Laser Module.

    The block generate optical power output based on average power and extinction ratio.

    Constructor Specific Documentation:

    Make a laser module block.

    Args:
        P_avg : average optical power (W)
        Wavelen : optical beam wavelength (m)
        ExtRatio : extiction ratio
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(P_avg, Wavelen, ExtRatio):
        """
        make(float P_avg, float Wavelen, float ExtRatio) -> Laser_ff_sptr

        FSO Laser Module.

        The block generate optical power output based on average power and extinction ratio.

        Constructor Specific Documentation:

        Make a laser module block.

        Args:
            P_avg : average optical power (W)
            Wavelen : optical beam wavelength (m)
            ExtRatio : extiction ratio
        """
        return _FSO_Comm_swig.Laser_ff_make(P_avg, Wavelen, ExtRatio)

    make = staticmethod(make)

    def set_P_avg(self, P_avg):
        """
        set_P_avg(Laser_ff self, float P_avg)

        Set laser module average optical power.
        """
        return _FSO_Comm_swig.Laser_ff_set_P_avg(self, P_avg)


    def P_avg(self):
        """
        P_avg(Laser_ff self) -> float

        Return current laser module average optical power.
        """
        return _FSO_Comm_swig.Laser_ff_P_avg(self)


    def set_Wavelen(self, Wavelen):
        """
        set_Wavelen(Laser_ff self, float Wavelen)

        Set laser module wavelength.
        """
        return _FSO_Comm_swig.Laser_ff_set_Wavelen(self, Wavelen)


    def Wavelen(self):
        """
        Wavelen(Laser_ff self) -> float

        Return current laser module wavelength.
        """
        return _FSO_Comm_swig.Laser_ff_Wavelen(self)


    def set_ExtRatio(self, ExtRatio):
        """
        set_ExtRatio(Laser_ff self, float ExtRatio)

        Set current laser module extinction ratio.
        """
        return _FSO_Comm_swig.Laser_ff_set_ExtRatio(self, ExtRatio)


    def ExtRatio(self):
        """
        ExtRatio(Laser_ff self) -> float

        Return current laser module extinction ratio.
        """
        return _FSO_Comm_swig.Laser_ff_ExtRatio(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Laser_ff
    __del__ = lambda self: None
Laser_ff_swigregister = _FSO_Comm_swig.Laser_ff_swigregister
Laser_ff_swigregister(Laser_ff)

def Laser_ff_make(P_avg, Wavelen, ExtRatio):
    """
    Laser_ff_make(float P_avg, float Wavelen, float ExtRatio) -> Laser_ff_sptr

    FSO Laser Module.

    The block generate optical power output based on average power and extinction ratio.

    Constructor Specific Documentation:

    Make a laser module block.

    Args:
        P_avg : average optical power (W)
        Wavelen : optical beam wavelength (m)
        ExtRatio : extiction ratio
    """
    return _FSO_Comm_swig.Laser_ff_make(P_avg, Wavelen, ExtRatio)

class Laser_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::FSO_Comm::Laser_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::FSO_Comm::Laser_ff)> self) -> Laser_ff_sptr
        __init__(boost::shared_ptr<(gr::FSO_Comm::Laser_ff)> self, Laser_ff p) -> Laser_ff_sptr
        """
        this = _FSO_Comm_swig.new_Laser_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Laser_ff_sptr self) -> Laser_ff"""
        return _FSO_Comm_swig.Laser_ff_sptr___deref__(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Laser_ff_sptr
    __del__ = lambda self: None

    def make(self, P_avg, Wavelen, ExtRatio):
        """
        make(Laser_ff_sptr self, float P_avg, float Wavelen, float ExtRatio) -> Laser_ff_sptr

        FSO Laser Module.

        The block generate optical power output based on average power and extinction ratio.

        Constructor Specific Documentation:

        Make a laser module block.

        Args:
            P_avg : average optical power (W)
            Wavelen : optical beam wavelength (m)
            ExtRatio : extiction ratio
        """
        return _FSO_Comm_swig.Laser_ff_sptr_make(self, P_avg, Wavelen, ExtRatio)


    def set_P_avg(self, P_avg):
        """
        set_P_avg(Laser_ff_sptr self, float P_avg)

        Set laser module average optical power.
        """
        return _FSO_Comm_swig.Laser_ff_sptr_set_P_avg(self, P_avg)


    def P_avg(self):
        """
        P_avg(Laser_ff_sptr self) -> float

        Return current laser module average optical power.
        """
        return _FSO_Comm_swig.Laser_ff_sptr_P_avg(self)


    def set_Wavelen(self, Wavelen):
        """
        set_Wavelen(Laser_ff_sptr self, float Wavelen)

        Set laser module wavelength.
        """
        return _FSO_Comm_swig.Laser_ff_sptr_set_Wavelen(self, Wavelen)


    def Wavelen(self):
        """
        Wavelen(Laser_ff_sptr self) -> float

        Return current laser module wavelength.
        """
        return _FSO_Comm_swig.Laser_ff_sptr_Wavelen(self)


    def set_ExtRatio(self, ExtRatio):
        """
        set_ExtRatio(Laser_ff_sptr self, float ExtRatio)

        Set current laser module extinction ratio.
        """
        return _FSO_Comm_swig.Laser_ff_sptr_set_ExtRatio(self, ExtRatio)


    def ExtRatio(self):
        """
        ExtRatio(Laser_ff_sptr self) -> float

        Return current laser module extinction ratio.
        """
        return _FSO_Comm_swig.Laser_ff_sptr_ExtRatio(self)


    def history(self):
        """history(Laser_ff_sptr self) -> unsigned int"""
        return _FSO_Comm_swig.Laser_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Laser_ff_sptr self, int which, int delay)
        declare_sample_delay(Laser_ff_sptr self, unsigned int delay)
        """
        return _FSO_Comm_swig.Laser_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Laser_ff_sptr self, int which) -> unsigned int"""
        return _FSO_Comm_swig.Laser_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Laser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Laser_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Laser_ff_sptr self) -> double"""
        return _FSO_Comm_swig.Laser_ff_sptr_relative_rate(self)


    def start(self):
        """start(Laser_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Laser_ff_sptr_start(self)


    def stop(self):
        """stop(Laser_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Laser_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Laser_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _FSO_Comm_swig.Laser_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Laser_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _FSO_Comm_swig.Laser_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Laser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Laser_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Laser_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Laser_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Laser_ff_sptr self)"""
        return _FSO_Comm_swig.Laser_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Laser_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Laser_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Laser_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Laser_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Laser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Laser_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Laser_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Laser_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Laser_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(Laser_ff_sptr self, int port, long max_output_buffer)
        """
        return _FSO_Comm_swig.Laser_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Laser_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Laser_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Laser_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(Laser_ff_sptr self, int port, long min_output_buffer)
        """
        return _FSO_Comm_swig.Laser_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Laser_ff_sptr self, int which) -> float
        pc_input_buffers_full(Laser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Laser_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Laser_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(Laser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Laser_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Laser_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(Laser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Laser_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Laser_ff_sptr self, int which) -> float
        pc_output_buffers_full(Laser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Laser_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Laser_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(Laser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Laser_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Laser_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(Laser_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Laser_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Laser_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Laser_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Laser_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _FSO_Comm_swig.Laser_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Laser_ff_sptr self)"""
        return _FSO_Comm_swig.Laser_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Laser_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _FSO_Comm_swig.Laser_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Laser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Laser_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Laser_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Laser_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Laser_ff_sptr self, int priority) -> int"""
        return _FSO_Comm_swig.Laser_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Laser_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Laser_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Laser_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Laser_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Laser_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Laser_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Laser_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Laser_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Laser_ff_sptr self) -> long"""
        return _FSO_Comm_swig.Laser_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Laser_ff_sptr self) -> basic_block_sptr"""
        return _FSO_Comm_swig.Laser_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Laser_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _FSO_Comm_swig.Laser_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Laser_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Laser_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Laser_ff_sptr self, std::string name)"""
        return _FSO_Comm_swig.Laser_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Laser_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _FSO_Comm_swig.Laser_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Laser_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Laser_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Laser_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Laser_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Laser_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _FSO_Comm_swig.Laser_ff_sptr_message_subscribers(self, which_port)

Laser_ff_sptr_swigregister = _FSO_Comm_swig.Laser_ff_sptr_swigregister
Laser_ff_sptr_swigregister(Laser_ff_sptr)


Laser_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Laser_ff = Laser_ff.make;

class Optical_Receiver_ff(object):
    """
    FSO Optical Receiver.

    The optical receiver models a photodiode followed by a transimpedance amplifer (TIA) converting optical power to electrial current.

    Constructor Specific Documentation:

    Make an optical receiver block.

    Args:
        Resp : photodiode responsivity (A/W)
        G_TIA : transimpedance amplifer (TIA) gain (Ohms)
        Imp : circuit impedance (Ohms)
        P_n : noise power (w)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(Resp, G_TIA, Imp, P_n):
        """
        make(float Resp, float G_TIA, float Imp, float P_n) -> Optical_Receiver_ff_sptr

        FSO Optical Receiver.

        The optical receiver models a photodiode followed by a transimpedance amplifer (TIA) converting optical power to electrial current.

        Constructor Specific Documentation:

        Make an optical receiver block.

        Args:
            Resp : photodiode responsivity (A/W)
            G_TIA : transimpedance amplifer (TIA) gain (Ohms)
            Imp : circuit impedance (Ohms)
            P_n : noise power (w)
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_make(Resp, G_TIA, Imp, P_n)

    make = staticmethod(make)

    def set_Resp(self, Resp):
        """
        set_Resp(Optical_Receiver_ff self, float Resp)

        Set optical receiver sensitivity.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_set_Resp(self, Resp)


    def Resp(self):
        """
        Resp(Optical_Receiver_ff self) -> float

        Return current optical receiver sensitivity.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_Resp(self)


    def set_G_TIA(self, G_TIA):
        """
        set_G_TIA(Optical_Receiver_ff self, float G_TIA)

        Set optical receiver TIA gain.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_set_G_TIA(self, G_TIA)


    def G_TIA(self):
        """
        G_TIA(Optical_Receiver_ff self) -> float

        Return current optical receiver TIA gain.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_G_TIA(self)


    def set_Imp(self, Imp):
        """
        set_Imp(Optical_Receiver_ff self, float Imp)

        Set optical receiver impedance.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_set_Imp(self, Imp)


    def Imp(self):
        """
        Imp(Optical_Receiver_ff self) -> float

        Return current optical receiver impedance.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_Imp(self)


    def set_P_n(self, P_n):
        """
        set_P_n(Optical_Receiver_ff self, float P_n)

        Set optical receiver noise power.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_set_P_n(self, P_n)


    def P_n(self):
        """
        P_n(Optical_Receiver_ff self) -> float

        Return current optical receiver noise power.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_P_n(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Optical_Receiver_ff
    __del__ = lambda self: None
Optical_Receiver_ff_swigregister = _FSO_Comm_swig.Optical_Receiver_ff_swigregister
Optical_Receiver_ff_swigregister(Optical_Receiver_ff)

def Optical_Receiver_ff_make(Resp, G_TIA, Imp, P_n):
    """
    Optical_Receiver_ff_make(float Resp, float G_TIA, float Imp, float P_n) -> Optical_Receiver_ff_sptr

    FSO Optical Receiver.

    The optical receiver models a photodiode followed by a transimpedance amplifer (TIA) converting optical power to electrial current.

    Constructor Specific Documentation:

    Make an optical receiver block.

    Args:
        Resp : photodiode responsivity (A/W)
        G_TIA : transimpedance amplifer (TIA) gain (Ohms)
        Imp : circuit impedance (Ohms)
        P_n : noise power (w)
    """
    return _FSO_Comm_swig.Optical_Receiver_ff_make(Resp, G_TIA, Imp, P_n)

class Optical_Receiver_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::FSO_Comm::Optical_Receiver_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::FSO_Comm::Optical_Receiver_ff)> self) -> Optical_Receiver_ff_sptr
        __init__(boost::shared_ptr<(gr::FSO_Comm::Optical_Receiver_ff)> self, Optical_Receiver_ff p) -> Optical_Receiver_ff_sptr
        """
        this = _FSO_Comm_swig.new_Optical_Receiver_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Optical_Receiver_ff_sptr self) -> Optical_Receiver_ff"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr___deref__(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Optical_Receiver_ff_sptr
    __del__ = lambda self: None

    def make(self, Resp, G_TIA, Imp, P_n):
        """
        make(Optical_Receiver_ff_sptr self, float Resp, float G_TIA, float Imp, float P_n) -> Optical_Receiver_ff_sptr

        FSO Optical Receiver.

        The optical receiver models a photodiode followed by a transimpedance amplifer (TIA) converting optical power to electrial current.

        Constructor Specific Documentation:

        Make an optical receiver block.

        Args:
            Resp : photodiode responsivity (A/W)
            G_TIA : transimpedance amplifer (TIA) gain (Ohms)
            Imp : circuit impedance (Ohms)
            P_n : noise power (w)
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_make(self, Resp, G_TIA, Imp, P_n)


    def set_Resp(self, Resp):
        """
        set_Resp(Optical_Receiver_ff_sptr self, float Resp)

        Set optical receiver sensitivity.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_Resp(self, Resp)


    def Resp(self):
        """
        Resp(Optical_Receiver_ff_sptr self) -> float

        Return current optical receiver sensitivity.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_Resp(self)


    def set_G_TIA(self, G_TIA):
        """
        set_G_TIA(Optical_Receiver_ff_sptr self, float G_TIA)

        Set optical receiver TIA gain.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_G_TIA(self, G_TIA)


    def G_TIA(self):
        """
        G_TIA(Optical_Receiver_ff_sptr self) -> float

        Return current optical receiver TIA gain.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_G_TIA(self)


    def set_Imp(self, Imp):
        """
        set_Imp(Optical_Receiver_ff_sptr self, float Imp)

        Set optical receiver impedance.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_Imp(self, Imp)


    def Imp(self):
        """
        Imp(Optical_Receiver_ff_sptr self) -> float

        Return current optical receiver impedance.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_Imp(self)


    def set_P_n(self, P_n):
        """
        set_P_n(Optical_Receiver_ff_sptr self, float P_n)

        Set optical receiver noise power.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_P_n(self, P_n)


    def P_n(self):
        """
        P_n(Optical_Receiver_ff_sptr self) -> float

        Return current optical receiver noise power.
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_P_n(self)


    def history(self):
        """history(Optical_Receiver_ff_sptr self) -> unsigned int"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Optical_Receiver_ff_sptr self, int which, int delay)
        declare_sample_delay(Optical_Receiver_ff_sptr self, unsigned int delay)
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Optical_Receiver_ff_sptr self, int which) -> unsigned int"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Optical_Receiver_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Optical_Receiver_ff_sptr self) -> double"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_relative_rate(self)


    def start(self):
        """start(Optical_Receiver_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_start(self)


    def stop(self):
        """stop(Optical_Receiver_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Optical_Receiver_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Optical_Receiver_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Optical_Receiver_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Optical_Receiver_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Optical_Receiver_ff_sptr self)"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Optical_Receiver_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Optical_Receiver_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Optical_Receiver_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Optical_Receiver_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Optical_Receiver_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(Optical_Receiver_ff_sptr self, int port, long max_output_buffer)
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Optical_Receiver_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Optical_Receiver_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(Optical_Receiver_ff_sptr self, int port, long min_output_buffer)
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Optical_Receiver_ff_sptr self, int which) -> float
        pc_input_buffers_full(Optical_Receiver_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Optical_Receiver_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(Optical_Receiver_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Optical_Receiver_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(Optical_Receiver_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Optical_Receiver_ff_sptr self, int which) -> float
        pc_output_buffers_full(Optical_Receiver_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Optical_Receiver_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(Optical_Receiver_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Optical_Receiver_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(Optical_Receiver_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Optical_Receiver_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Optical_Receiver_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Optical_Receiver_ff_sptr self)"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Optical_Receiver_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Optical_Receiver_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Optical_Receiver_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Optical_Receiver_ff_sptr self, int priority) -> int"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Optical_Receiver_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Optical_Receiver_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Optical_Receiver_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Optical_Receiver_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Optical_Receiver_ff_sptr self) -> long"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Optical_Receiver_ff_sptr self) -> basic_block_sptr"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Optical_Receiver_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Optical_Receiver_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Optical_Receiver_ff_sptr self, std::string name)"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Optical_Receiver_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Optical_Receiver_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Optical_Receiver_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Optical_Receiver_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _FSO_Comm_swig.Optical_Receiver_ff_sptr_message_subscribers(self, which_port)

Optical_Receiver_ff_sptr_swigregister = _FSO_Comm_swig.Optical_Receiver_ff_sptr_swigregister
Optical_Receiver_ff_sptr_swigregister(Optical_Receiver_ff_sptr)


Optical_Receiver_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Optical_Receiver_ff = Optical_Receiver_ff.make;

class Pointing_Errors_ff(object):
    """
    FSO Pointing Errors Channel.

    This block simulates the effect of pointing errors (vibration) in FSO channel.

    Constructor Specific Documentation:

    Make a pointing errors block.

    Args:
        Jitter : vibration displacement (m)
        LinkLen : FSO channel link length (m)
        Tx_Dia : transmitter aperture diameter (m)
        Tx_Theta : transmitter beam half-angle divergence angle (Deg)
        Rx_Dia : receiver aperture diameter (m)
        TempCorr : temppral correlation of pointing errors channel (s)
        SampRate : sampling rate of signal (samples per second)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(Jitter, LinkLen, Tx_Dia, Tx_Theta, Rx_Dia, TempCorr, SampRate):
        """
        make(float Jitter, float LinkLen, float Tx_Dia, float Tx_Theta, float Rx_Dia, float TempCorr, float SampRate) -> Pointing_Errors_ff_sptr

        FSO Pointing Errors Channel.

        This block simulates the effect of pointing errors (vibration) in FSO channel.

        Constructor Specific Documentation:

        Make a pointing errors block.

        Args:
            Jitter : vibration displacement (m)
            LinkLen : FSO channel link length (m)
            Tx_Dia : transmitter aperture diameter (m)
            Tx_Theta : transmitter beam half-angle divergence angle (Deg)
            Rx_Dia : receiver aperture diameter (m)
            TempCorr : temppral correlation of pointing errors channel (s)
            SampRate : sampling rate of signal (samples per second)
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_make(Jitter, LinkLen, Tx_Dia, Tx_Theta, Rx_Dia, TempCorr, SampRate)

    make = staticmethod(make)

    def set_Jitter(self, Jitter):
        """
        set_Jitter(Pointing_Errors_ff self, float Jitter)

        Set pointing errors jitter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_set_Jitter(self, Jitter)


    def Jitter(self):
        """
        Jitter(Pointing_Errors_ff self) -> float

        Return current pointing errors jitter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_Jitter(self)


    def set_LinkLen(self, LinkLen):
        """
        set_LinkLen(Pointing_Errors_ff self, float LinkLen)

        Set pointing errors link length.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_set_LinkLen(self, LinkLen)


    def LinkLen(self):
        """
        LinkLen(Pointing_Errors_ff self) -> float

        Return current pointing errors link length.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_LinkLen(self)


    def set_Tx_Dia(self, Tx_Dia):
        """
        set_Tx_Dia(Pointing_Errors_ff self, float Tx_Dia)

        Set pointing errors transmitter aperture diameter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_set_Tx_Dia(self, Tx_Dia)


    def Tx_Dia(self):
        """
        Tx_Dia(Pointing_Errors_ff self) -> float

        Return current pointing errors transmitter aperture diameter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_Tx_Dia(self)


    def set_Tx_Theta(self, Tx_Theta):
        """
        set_Tx_Theta(Pointing_Errors_ff self, float Tx_Theta)

        Set poinintg errors transmitter beam divergence.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_set_Tx_Theta(self, Tx_Theta)


    def Tx_Theta(self):
        """
        Tx_Theta(Pointing_Errors_ff self) -> float

        Return current poinintg errors transmitter beam divergence.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_Tx_Theta(self)


    def set_Rx_Dia(self, Rx_Dia):
        """
        set_Rx_Dia(Pointing_Errors_ff self, float Rx_Dia)

        Set pointing errors receiver aperture diameter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_set_Rx_Dia(self, Rx_Dia)


    def Rx_Dia(self):
        """
        Rx_Dia(Pointing_Errors_ff self) -> float

        Return current pointing errors receiver aperture diameter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_Rx_Dia(self)


    def set_TempCorr(self, TempCorr):
        """
        set_TempCorr(Pointing_Errors_ff self, float TempCorr)

        Set pointing errors temporal correlation.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_set_TempCorr(self, TempCorr)


    def TempCorr(self):
        """
        TempCorr(Pointing_Errors_ff self) -> float

        Return current pointing errors temporal correlation.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_TempCorr(self)


    def set_SampRate(self, SampRate):
        """
        set_SampRate(Pointing_Errors_ff self, float SampRate)

        Set poinintg errors sampling rate.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_set_SampRate(self, SampRate)


    def SampRate(self):
        """
        SampRate(Pointing_Errors_ff self) -> float

        Return current poinintg errors sampling rate.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_SampRate(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Pointing_Errors_ff
    __del__ = lambda self: None
Pointing_Errors_ff_swigregister = _FSO_Comm_swig.Pointing_Errors_ff_swigregister
Pointing_Errors_ff_swigregister(Pointing_Errors_ff)

def Pointing_Errors_ff_make(Jitter, LinkLen, Tx_Dia, Tx_Theta, Rx_Dia, TempCorr, SampRate):
    """
    Pointing_Errors_ff_make(float Jitter, float LinkLen, float Tx_Dia, float Tx_Theta, float Rx_Dia, float TempCorr, float SampRate) -> Pointing_Errors_ff_sptr

    FSO Pointing Errors Channel.

    This block simulates the effect of pointing errors (vibration) in FSO channel.

    Constructor Specific Documentation:

    Make a pointing errors block.

    Args:
        Jitter : vibration displacement (m)
        LinkLen : FSO channel link length (m)
        Tx_Dia : transmitter aperture diameter (m)
        Tx_Theta : transmitter beam half-angle divergence angle (Deg)
        Rx_Dia : receiver aperture diameter (m)
        TempCorr : temppral correlation of pointing errors channel (s)
        SampRate : sampling rate of signal (samples per second)
    """
    return _FSO_Comm_swig.Pointing_Errors_ff_make(Jitter, LinkLen, Tx_Dia, Tx_Theta, Rx_Dia, TempCorr, SampRate)

class Pointing_Errors_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::FSO_Comm::Pointing_Errors_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::FSO_Comm::Pointing_Errors_ff)> self) -> Pointing_Errors_ff_sptr
        __init__(boost::shared_ptr<(gr::FSO_Comm::Pointing_Errors_ff)> self, Pointing_Errors_ff p) -> Pointing_Errors_ff_sptr
        """
        this = _FSO_Comm_swig.new_Pointing_Errors_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Pointing_Errors_ff_sptr self) -> Pointing_Errors_ff"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr___deref__(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Pointing_Errors_ff_sptr
    __del__ = lambda self: None

    def make(self, Jitter, LinkLen, Tx_Dia, Tx_Theta, Rx_Dia, TempCorr, SampRate):
        """
        make(Pointing_Errors_ff_sptr self, float Jitter, float LinkLen, float Tx_Dia, float Tx_Theta, float Rx_Dia, float TempCorr, float SampRate) -> Pointing_Errors_ff_sptr

        FSO Pointing Errors Channel.

        This block simulates the effect of pointing errors (vibration) in FSO channel.

        Constructor Specific Documentation:

        Make a pointing errors block.

        Args:
            Jitter : vibration displacement (m)
            LinkLen : FSO channel link length (m)
            Tx_Dia : transmitter aperture diameter (m)
            Tx_Theta : transmitter beam half-angle divergence angle (Deg)
            Rx_Dia : receiver aperture diameter (m)
            TempCorr : temppral correlation of pointing errors channel (s)
            SampRate : sampling rate of signal (samples per second)
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_make(self, Jitter, LinkLen, Tx_Dia, Tx_Theta, Rx_Dia, TempCorr, SampRate)


    def set_Jitter(self, Jitter):
        """
        set_Jitter(Pointing_Errors_ff_sptr self, float Jitter)

        Set pointing errors jitter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_Jitter(self, Jitter)


    def Jitter(self):
        """
        Jitter(Pointing_Errors_ff_sptr self) -> float

        Return current pointing errors jitter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_Jitter(self)


    def set_LinkLen(self, LinkLen):
        """
        set_LinkLen(Pointing_Errors_ff_sptr self, float LinkLen)

        Set pointing errors link length.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_LinkLen(self, LinkLen)


    def LinkLen(self):
        """
        LinkLen(Pointing_Errors_ff_sptr self) -> float

        Return current pointing errors link length.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_LinkLen(self)


    def set_Tx_Dia(self, Tx_Dia):
        """
        set_Tx_Dia(Pointing_Errors_ff_sptr self, float Tx_Dia)

        Set pointing errors transmitter aperture diameter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_Tx_Dia(self, Tx_Dia)


    def Tx_Dia(self):
        """
        Tx_Dia(Pointing_Errors_ff_sptr self) -> float

        Return current pointing errors transmitter aperture diameter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_Tx_Dia(self)


    def set_Tx_Theta(self, Tx_Theta):
        """
        set_Tx_Theta(Pointing_Errors_ff_sptr self, float Tx_Theta)

        Set poinintg errors transmitter beam divergence.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_Tx_Theta(self, Tx_Theta)


    def Tx_Theta(self):
        """
        Tx_Theta(Pointing_Errors_ff_sptr self) -> float

        Return current poinintg errors transmitter beam divergence.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_Tx_Theta(self)


    def set_Rx_Dia(self, Rx_Dia):
        """
        set_Rx_Dia(Pointing_Errors_ff_sptr self, float Rx_Dia)

        Set pointing errors receiver aperture diameter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_Rx_Dia(self, Rx_Dia)


    def Rx_Dia(self):
        """
        Rx_Dia(Pointing_Errors_ff_sptr self) -> float

        Return current pointing errors receiver aperture diameter.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_Rx_Dia(self)


    def set_TempCorr(self, TempCorr):
        """
        set_TempCorr(Pointing_Errors_ff_sptr self, float TempCorr)

        Set pointing errors temporal correlation.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_TempCorr(self, TempCorr)


    def TempCorr(self):
        """
        TempCorr(Pointing_Errors_ff_sptr self) -> float

        Return current pointing errors temporal correlation.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_TempCorr(self)


    def set_SampRate(self, SampRate):
        """
        set_SampRate(Pointing_Errors_ff_sptr self, float SampRate)

        Set poinintg errors sampling rate.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_SampRate(self, SampRate)


    def SampRate(self):
        """
        SampRate(Pointing_Errors_ff_sptr self) -> float

        Return current poinintg errors sampling rate.
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_SampRate(self)


    def history(self):
        """history(Pointing_Errors_ff_sptr self) -> unsigned int"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Pointing_Errors_ff_sptr self, int which, int delay)
        declare_sample_delay(Pointing_Errors_ff_sptr self, unsigned int delay)
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Pointing_Errors_ff_sptr self, int which) -> unsigned int"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Pointing_Errors_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Pointing_Errors_ff_sptr self) -> double"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_relative_rate(self)


    def start(self):
        """start(Pointing_Errors_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_start(self)


    def stop(self):
        """stop(Pointing_Errors_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Pointing_Errors_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Pointing_Errors_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Pointing_Errors_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Pointing_Errors_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Pointing_Errors_ff_sptr self)"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Pointing_Errors_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Pointing_Errors_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Pointing_Errors_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Pointing_Errors_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Pointing_Errors_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(Pointing_Errors_ff_sptr self, int port, long max_output_buffer)
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Pointing_Errors_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Pointing_Errors_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(Pointing_Errors_ff_sptr self, int port, long min_output_buffer)
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Pointing_Errors_ff_sptr self, int which) -> float
        pc_input_buffers_full(Pointing_Errors_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Pointing_Errors_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(Pointing_Errors_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Pointing_Errors_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(Pointing_Errors_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Pointing_Errors_ff_sptr self, int which) -> float
        pc_output_buffers_full(Pointing_Errors_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Pointing_Errors_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(Pointing_Errors_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Pointing_Errors_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(Pointing_Errors_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Pointing_Errors_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Pointing_Errors_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Pointing_Errors_ff_sptr self)"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Pointing_Errors_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Pointing_Errors_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Pointing_Errors_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Pointing_Errors_ff_sptr self, int priority) -> int"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Pointing_Errors_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Pointing_Errors_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Pointing_Errors_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Pointing_Errors_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Pointing_Errors_ff_sptr self) -> long"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Pointing_Errors_ff_sptr self) -> basic_block_sptr"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Pointing_Errors_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Pointing_Errors_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Pointing_Errors_ff_sptr self, std::string name)"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Pointing_Errors_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Pointing_Errors_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Pointing_Errors_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Pointing_Errors_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _FSO_Comm_swig.Pointing_Errors_ff_sptr_message_subscribers(self, which_port)

Pointing_Errors_ff_sptr_swigregister = _FSO_Comm_swig.Pointing_Errors_ff_sptr_swigregister
Pointing_Errors_ff_sptr_swigregister(Pointing_Errors_ff_sptr)


Pointing_Errors_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Pointing_Errors_ff = Pointing_Errors_ff.make;

class Turbulence_ff(object):
    """
    FSO Turbulence Channel.

    This block simulates the effect of turbulence (scintillation) in FSO channel.

    Constructor Specific Documentation:

    Make a turbulence block.

    Args:
        Cn2 : refractive index structure constant (m^(-2/3))
        Wavelen : optical beam wavelength (m)
        LinkLen : FSO channel link length (m)
        Rx_Dia : receiver aperture diameter (m)
        TempCorr : temppral correlation of turbulence channel (s)
        SampRate : sampling rate of signal (samples per second)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(Cn2, Wavelen, LinkLen, Rx_Dia, TempCorr, SampRate):
        """
        make(float Cn2, float Wavelen, float LinkLen, float Rx_Dia, float TempCorr, float SampRate) -> Turbulence_ff_sptr

        FSO Turbulence Channel.

        This block simulates the effect of turbulence (scintillation) in FSO channel.

        Constructor Specific Documentation:

        Make a turbulence block.

        Args:
            Cn2 : refractive index structure constant (m^(-2/3))
            Wavelen : optical beam wavelength (m)
            LinkLen : FSO channel link length (m)
            Rx_Dia : receiver aperture diameter (m)
            TempCorr : temppral correlation of turbulence channel (s)
            SampRate : sampling rate of signal (samples per second)
        """
        return _FSO_Comm_swig.Turbulence_ff_make(Cn2, Wavelen, LinkLen, Rx_Dia, TempCorr, SampRate)

    make = staticmethod(make)

    def set_Cn2(self, Cn2):
        """
        set_Cn2(Turbulence_ff self, float Cn2)

        Set turbulence Cn2.
        """
        return _FSO_Comm_swig.Turbulence_ff_set_Cn2(self, Cn2)


    def Cn2(self):
        """
        Cn2(Turbulence_ff self) -> float

        Return current turbulence Cn2.
        """
        return _FSO_Comm_swig.Turbulence_ff_Cn2(self)


    def set_Wavelen(self, Wavelen):
        """
        set_Wavelen(Turbulence_ff self, float Wavelen)

        Set turbulence wavelength.
        """
        return _FSO_Comm_swig.Turbulence_ff_set_Wavelen(self, Wavelen)


    def Wavelen(self):
        """
        Wavelen(Turbulence_ff self) -> float

        Return current turbulence wavelength.
        """
        return _FSO_Comm_swig.Turbulence_ff_Wavelen(self)


    def set_LinkLen(self, LinkLen):
        """
        set_LinkLen(Turbulence_ff self, float LinkLen)

        Set turbulence link length.
        """
        return _FSO_Comm_swig.Turbulence_ff_set_LinkLen(self, LinkLen)


    def LinkLen(self):
        """
        LinkLen(Turbulence_ff self) -> float

        Return current turbulence link length.
        """
        return _FSO_Comm_swig.Turbulence_ff_LinkLen(self)


    def set_Rx_Dia(self, Rx_Dia):
        """
        set_Rx_Dia(Turbulence_ff self, float Rx_Dia)

        Set turbulence receiver apertture diameter.
        """
        return _FSO_Comm_swig.Turbulence_ff_set_Rx_Dia(self, Rx_Dia)


    def Rx_Dia(self):
        """
        Rx_Dia(Turbulence_ff self) -> float

        Return current turbulence receiver aperture diameter.
        """
        return _FSO_Comm_swig.Turbulence_ff_Rx_Dia(self)


    def set_TempCorr(self, TempCorr):
        """
        set_TempCorr(Turbulence_ff self, float TempCorr)

        Set turbulence temporal correlation.
        """
        return _FSO_Comm_swig.Turbulence_ff_set_TempCorr(self, TempCorr)


    def TempCorr(self):
        """
        TempCorr(Turbulence_ff self) -> float

        Return current turbulence temporal correlation.
        """
        return _FSO_Comm_swig.Turbulence_ff_TempCorr(self)


    def set_SampRate(self, SampRate):
        """
        set_SampRate(Turbulence_ff self, float SampRate)

        Set turbulence sampling rate.
        """
        return _FSO_Comm_swig.Turbulence_ff_set_SampRate(self, SampRate)


    def SampRate(self):
        """
        SampRate(Turbulence_ff self) -> float

        Return current turbulence sampling rate.
        """
        return _FSO_Comm_swig.Turbulence_ff_SampRate(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Turbulence_ff
    __del__ = lambda self: None
Turbulence_ff_swigregister = _FSO_Comm_swig.Turbulence_ff_swigregister
Turbulence_ff_swigregister(Turbulence_ff)

def Turbulence_ff_make(Cn2, Wavelen, LinkLen, Rx_Dia, TempCorr, SampRate):
    """
    Turbulence_ff_make(float Cn2, float Wavelen, float LinkLen, float Rx_Dia, float TempCorr, float SampRate) -> Turbulence_ff_sptr

    FSO Turbulence Channel.

    This block simulates the effect of turbulence (scintillation) in FSO channel.

    Constructor Specific Documentation:

    Make a turbulence block.

    Args:
        Cn2 : refractive index structure constant (m^(-2/3))
        Wavelen : optical beam wavelength (m)
        LinkLen : FSO channel link length (m)
        Rx_Dia : receiver aperture diameter (m)
        TempCorr : temppral correlation of turbulence channel (s)
        SampRate : sampling rate of signal (samples per second)
    """
    return _FSO_Comm_swig.Turbulence_ff_make(Cn2, Wavelen, LinkLen, Rx_Dia, TempCorr, SampRate)

class Turbulence_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::FSO_Comm::Turbulence_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::FSO_Comm::Turbulence_ff)> self) -> Turbulence_ff_sptr
        __init__(boost::shared_ptr<(gr::FSO_Comm::Turbulence_ff)> self, Turbulence_ff p) -> Turbulence_ff_sptr
        """
        this = _FSO_Comm_swig.new_Turbulence_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(Turbulence_ff_sptr self) -> Turbulence_ff"""
        return _FSO_Comm_swig.Turbulence_ff_sptr___deref__(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_Turbulence_ff_sptr
    __del__ = lambda self: None

    def make(self, Cn2, Wavelen, LinkLen, Rx_Dia, TempCorr, SampRate):
        """
        make(Turbulence_ff_sptr self, float Cn2, float Wavelen, float LinkLen, float Rx_Dia, float TempCorr, float SampRate) -> Turbulence_ff_sptr

        FSO Turbulence Channel.

        This block simulates the effect of turbulence (scintillation) in FSO channel.

        Constructor Specific Documentation:

        Make a turbulence block.

        Args:
            Cn2 : refractive index structure constant (m^(-2/3))
            Wavelen : optical beam wavelength (m)
            LinkLen : FSO channel link length (m)
            Rx_Dia : receiver aperture diameter (m)
            TempCorr : temppral correlation of turbulence channel (s)
            SampRate : sampling rate of signal (samples per second)
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_make(self, Cn2, Wavelen, LinkLen, Rx_Dia, TempCorr, SampRate)


    def set_Cn2(self, Cn2):
        """
        set_Cn2(Turbulence_ff_sptr self, float Cn2)

        Set turbulence Cn2.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_Cn2(self, Cn2)


    def Cn2(self):
        """
        Cn2(Turbulence_ff_sptr self) -> float

        Return current turbulence Cn2.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_Cn2(self)


    def set_Wavelen(self, Wavelen):
        """
        set_Wavelen(Turbulence_ff_sptr self, float Wavelen)

        Set turbulence wavelength.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_Wavelen(self, Wavelen)


    def Wavelen(self):
        """
        Wavelen(Turbulence_ff_sptr self) -> float

        Return current turbulence wavelength.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_Wavelen(self)


    def set_LinkLen(self, LinkLen):
        """
        set_LinkLen(Turbulence_ff_sptr self, float LinkLen)

        Set turbulence link length.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_LinkLen(self, LinkLen)


    def LinkLen(self):
        """
        LinkLen(Turbulence_ff_sptr self) -> float

        Return current turbulence link length.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_LinkLen(self)


    def set_Rx_Dia(self, Rx_Dia):
        """
        set_Rx_Dia(Turbulence_ff_sptr self, float Rx_Dia)

        Set turbulence receiver apertture diameter.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_Rx_Dia(self, Rx_Dia)


    def Rx_Dia(self):
        """
        Rx_Dia(Turbulence_ff_sptr self) -> float

        Return current turbulence receiver aperture diameter.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_Rx_Dia(self)


    def set_TempCorr(self, TempCorr):
        """
        set_TempCorr(Turbulence_ff_sptr self, float TempCorr)

        Set turbulence temporal correlation.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_TempCorr(self, TempCorr)


    def TempCorr(self):
        """
        TempCorr(Turbulence_ff_sptr self) -> float

        Return current turbulence temporal correlation.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_TempCorr(self)


    def set_SampRate(self, SampRate):
        """
        set_SampRate(Turbulence_ff_sptr self, float SampRate)

        Set turbulence sampling rate.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_SampRate(self, SampRate)


    def SampRate(self):
        """
        SampRate(Turbulence_ff_sptr self) -> float

        Return current turbulence sampling rate.
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_SampRate(self)


    def history(self):
        """history(Turbulence_ff_sptr self) -> unsigned int"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Turbulence_ff_sptr self, int which, int delay)
        declare_sample_delay(Turbulence_ff_sptr self, unsigned int delay)
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(Turbulence_ff_sptr self, int which) -> unsigned int"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(Turbulence_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(Turbulence_ff_sptr self) -> double"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_relative_rate(self)


    def start(self):
        """start(Turbulence_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_start(self)


    def stop(self):
        """stop(Turbulence_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(Turbulence_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(Turbulence_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(Turbulence_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(Turbulence_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Turbulence_ff_sptr self)"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Turbulence_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(Turbulence_ff_sptr self, int m)"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(Turbulence_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(Turbulence_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Turbulence_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(Turbulence_ff_sptr self, int port, long max_output_buffer)
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(Turbulence_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Turbulence_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(Turbulence_ff_sptr self, int port, long min_output_buffer)
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Turbulence_ff_sptr self, int which) -> float
        pc_input_buffers_full(Turbulence_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Turbulence_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(Turbulence_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Turbulence_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(Turbulence_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Turbulence_ff_sptr self, int which) -> float
        pc_output_buffers_full(Turbulence_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Turbulence_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(Turbulence_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Turbulence_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(Turbulence_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(Turbulence_ff_sptr self) -> float"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(Turbulence_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(Turbulence_ff_sptr self)"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(Turbulence_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(Turbulence_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(Turbulence_ff_sptr self) -> int"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(Turbulence_ff_sptr self, int priority) -> int"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(Turbulence_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(Turbulence_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(Turbulence_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(Turbulence_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(Turbulence_ff_sptr self) -> long"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(Turbulence_ff_sptr self) -> basic_block_sptr"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(Turbulence_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(Turbulence_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(Turbulence_ff_sptr self, std::string name)"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(Turbulence_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _FSO_Comm_swig.Turbulence_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(Turbulence_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(Turbulence_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(Turbulence_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _FSO_Comm_swig.Turbulence_ff_sptr_message_subscribers(self, which_port)

Turbulence_ff_sptr_swigregister = _FSO_Comm_swig.Turbulence_ff_sptr_swigregister
Turbulence_ff_sptr_swigregister(Turbulence_ff_sptr)


Turbulence_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Turbulence_ff = Turbulence_ff.make;

class FogSmoke_Loss_ff(object):
    """
    Fog/Smoke Loss in FSO Channel.

    The block uses Kim model to simulate the attenuation of fog/smoke in FSO channels based on visibility.

    Constructor Specific Documentation:

    Make a FogSmoke Loss block.

    Args:
        Wavelen : optical beam wavelength (m)
        LinkLen : FSO channel link length (m)
        Vis : FSO channel visibility (m)
    """

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def make(Wavelen, LinkLen, Vis):
        """
        make(float Wavelen, float LinkLen, float Vis) -> FogSmoke_Loss_ff_sptr

        Fog/Smoke Loss in FSO Channel.

        The block uses Kim model to simulate the attenuation of fog/smoke in FSO channels based on visibility.

        Constructor Specific Documentation:

        Make a FogSmoke Loss block.

        Args:
            Wavelen : optical beam wavelength (m)
            LinkLen : FSO channel link length (m)
            Vis : FSO channel visibility (m)
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_make(Wavelen, LinkLen, Vis)

    make = staticmethod(make)

    def set_Wavelen(self, Wavelen):
        """
        set_Wavelen(FogSmoke_Loss_ff self, float Wavelen)

        Set fog/smoke loss wavelength.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_set_Wavelen(self, Wavelen)


    def Wavelen(self):
        """
        Wavelen(FogSmoke_Loss_ff self) -> float

        Return current fogsmoke loss wavelength.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_Wavelen(self)


    def set_LinkLen(self, LinkLen):
        """
        set_LinkLen(FogSmoke_Loss_ff self, float LinkLen)

        Set fog/smoke loss link length.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_set_LinkLen(self, LinkLen)


    def LinkLen(self):
        """
        LinkLen(FogSmoke_Loss_ff self) -> float

        Return current fog/smoke loss link length.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_LinkLen(self)


    def set_Vis(self, Vis):
        """
        set_Vis(FogSmoke_Loss_ff self, float Vis)

        Set fog/smoke loss visibility.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_set_Vis(self, Vis)


    def Vis(self):
        """
        Vis(FogSmoke_Loss_ff self) -> float

        Return current fog/smoke loss visibility.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_Vis(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_FogSmoke_Loss_ff
    __del__ = lambda self: None
FogSmoke_Loss_ff_swigregister = _FSO_Comm_swig.FogSmoke_Loss_ff_swigregister
FogSmoke_Loss_ff_swigregister(FogSmoke_Loss_ff)

def FogSmoke_Loss_ff_make(Wavelen, LinkLen, Vis):
    """
    FogSmoke_Loss_ff_make(float Wavelen, float LinkLen, float Vis) -> FogSmoke_Loss_ff_sptr

    Fog/Smoke Loss in FSO Channel.

    The block uses Kim model to simulate the attenuation of fog/smoke in FSO channels based on visibility.

    Constructor Specific Documentation:

    Make a FogSmoke Loss block.

    Args:
        Wavelen : optical beam wavelength (m)
        LinkLen : FSO channel link length (m)
        Vis : FSO channel visibility (m)
    """
    return _FSO_Comm_swig.FogSmoke_Loss_ff_make(Wavelen, LinkLen, Vis)

class FogSmoke_Loss_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::FSO_Comm::FogSmoke_Loss_ff)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(boost::shared_ptr<(gr::FSO_Comm::FogSmoke_Loss_ff)> self) -> FogSmoke_Loss_ff_sptr
        __init__(boost::shared_ptr<(gr::FSO_Comm::FogSmoke_Loss_ff)> self, FogSmoke_Loss_ff p) -> FogSmoke_Loss_ff_sptr
        """
        this = _FSO_Comm_swig.new_FogSmoke_Loss_ff_sptr(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __deref__(self):
        """__deref__(FogSmoke_Loss_ff_sptr self) -> FogSmoke_Loss_ff"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr___deref__(self)

    __swig_destroy__ = _FSO_Comm_swig.delete_FogSmoke_Loss_ff_sptr
    __del__ = lambda self: None

    def make(self, Wavelen, LinkLen, Vis):
        """
        make(FogSmoke_Loss_ff_sptr self, float Wavelen, float LinkLen, float Vis) -> FogSmoke_Loss_ff_sptr

        Fog/Smoke Loss in FSO Channel.

        The block uses Kim model to simulate the attenuation of fog/smoke in FSO channels based on visibility.

        Constructor Specific Documentation:

        Make a FogSmoke Loss block.

        Args:
            Wavelen : optical beam wavelength (m)
            LinkLen : FSO channel link length (m)
            Vis : FSO channel visibility (m)
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_make(self, Wavelen, LinkLen, Vis)


    def set_Wavelen(self, Wavelen):
        """
        set_Wavelen(FogSmoke_Loss_ff_sptr self, float Wavelen)

        Set fog/smoke loss wavelength.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_Wavelen(self, Wavelen)


    def Wavelen(self):
        """
        Wavelen(FogSmoke_Loss_ff_sptr self) -> float

        Return current fogsmoke loss wavelength.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_Wavelen(self)


    def set_LinkLen(self, LinkLen):
        """
        set_LinkLen(FogSmoke_Loss_ff_sptr self, float LinkLen)

        Set fog/smoke loss link length.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_LinkLen(self, LinkLen)


    def LinkLen(self):
        """
        LinkLen(FogSmoke_Loss_ff_sptr self) -> float

        Return current fog/smoke loss link length.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_LinkLen(self)


    def set_Vis(self, Vis):
        """
        set_Vis(FogSmoke_Loss_ff_sptr self, float Vis)

        Set fog/smoke loss visibility.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_Vis(self, Vis)


    def Vis(self):
        """
        Vis(FogSmoke_Loss_ff_sptr self) -> float

        Return current fog/smoke loss visibility.
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_Vis(self)


    def history(self):
        """history(FogSmoke_Loss_ff_sptr self) -> unsigned int"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_history(self)


    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(FogSmoke_Loss_ff_sptr self, int which, int delay)
        declare_sample_delay(FogSmoke_Loss_ff_sptr self, unsigned int delay)
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_declare_sample_delay(self, *args)


    def sample_delay(self, which):
        """sample_delay(FogSmoke_Loss_ff_sptr self, int which) -> unsigned int"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_sample_delay(self, which)


    def output_multiple(self):
        """output_multiple(FogSmoke_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_output_multiple(self)


    def relative_rate(self):
        """relative_rate(FogSmoke_Loss_ff_sptr self) -> double"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_relative_rate(self)


    def start(self):
        """start(FogSmoke_Loss_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_start(self)


    def stop(self):
        """stop(FogSmoke_Loss_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_stop(self)


    def nitems_read(self, which_input):
        """nitems_read(FogSmoke_Loss_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_nitems_read(self, which_input)


    def nitems_written(self, which_output):
        """nitems_written(FogSmoke_Loss_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_nitems_written(self, which_output)


    def max_noutput_items(self):
        """max_noutput_items(FogSmoke_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_max_noutput_items(self)


    def set_max_noutput_items(self, m):
        """set_max_noutput_items(FogSmoke_Loss_ff_sptr self, int m)"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_max_noutput_items(self, m)


    def unset_max_noutput_items(self):
        """unset_max_noutput_items(FogSmoke_Loss_ff_sptr self)"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_unset_max_noutput_items(self)


    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(FogSmoke_Loss_ff_sptr self) -> bool"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_is_set_max_noutput_items(self)


    def set_min_noutput_items(self, m):
        """set_min_noutput_items(FogSmoke_Loss_ff_sptr self, int m)"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_min_noutput_items(self, m)


    def min_noutput_items(self):
        """min_noutput_items(FogSmoke_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_min_noutput_items(self)


    def max_output_buffer(self, i):
        """max_output_buffer(FogSmoke_Loss_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_max_output_buffer(self, i)


    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(FogSmoke_Loss_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(FogSmoke_Loss_ff_sptr self, int port, long max_output_buffer)
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_max_output_buffer(self, *args)


    def min_output_buffer(self, i):
        """min_output_buffer(FogSmoke_Loss_ff_sptr self, int i) -> long"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_min_output_buffer(self, i)


    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(FogSmoke_Loss_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(FogSmoke_Loss_ff_sptr self, int port, long min_output_buffer)
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_min_output_buffer(self, *args)


    def pc_noutput_items(self):
        """pc_noutput_items(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_noutput_items(self)


    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_noutput_items_avg(self)


    def pc_noutput_items_var(self):
        """pc_noutput_items_var(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_noutput_items_var(self)


    def pc_nproduced(self):
        """pc_nproduced(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_nproduced(self)


    def pc_nproduced_avg(self):
        """pc_nproduced_avg(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_nproduced_avg(self)


    def pc_nproduced_var(self):
        """pc_nproduced_var(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_nproduced_var(self)


    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(FogSmoke_Loss_ff_sptr self, int which) -> float
        pc_input_buffers_full(FogSmoke_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_input_buffers_full(self, *args)


    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(FogSmoke_Loss_ff_sptr self, int which) -> float
        pc_input_buffers_full_avg(FogSmoke_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_input_buffers_full_avg(self, *args)


    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(FogSmoke_Loss_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(FogSmoke_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_input_buffers_full_var(self, *args)


    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(FogSmoke_Loss_ff_sptr self, int which) -> float
        pc_output_buffers_full(FogSmoke_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_output_buffers_full(self, *args)


    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(FogSmoke_Loss_ff_sptr self, int which) -> float
        pc_output_buffers_full_avg(FogSmoke_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_output_buffers_full_avg(self, *args)


    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(FogSmoke_Loss_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(FogSmoke_Loss_ff_sptr self) -> pmt_vector_float
        """
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_output_buffers_full_var(self, *args)


    def pc_work_time(self):
        """pc_work_time(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_work_time(self)


    def pc_work_time_avg(self):
        """pc_work_time_avg(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_work_time_avg(self)


    def pc_work_time_var(self):
        """pc_work_time_var(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_work_time_var(self)


    def pc_work_time_total(self):
        """pc_work_time_total(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_work_time_total(self)


    def pc_throughput_avg(self):
        """pc_throughput_avg(FogSmoke_Loss_ff_sptr self) -> float"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_pc_throughput_avg(self)


    def set_processor_affinity(self, mask):
        """set_processor_affinity(FogSmoke_Loss_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_processor_affinity(self, mask)


    def unset_processor_affinity(self):
        """unset_processor_affinity(FogSmoke_Loss_ff_sptr self)"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_unset_processor_affinity(self)


    def processor_affinity(self):
        """processor_affinity(FogSmoke_Loss_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_processor_affinity(self)


    def active_thread_priority(self):
        """active_thread_priority(FogSmoke_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_active_thread_priority(self)


    def thread_priority(self):
        """thread_priority(FogSmoke_Loss_ff_sptr self) -> int"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_thread_priority(self)


    def set_thread_priority(self, priority):
        """set_thread_priority(FogSmoke_Loss_ff_sptr self, int priority) -> int"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_thread_priority(self, priority)


    def name(self):
        """name(FogSmoke_Loss_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_name(self)


    def symbol_name(self):
        """symbol_name(FogSmoke_Loss_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_symbol_name(self)


    def input_signature(self):
        """input_signature(FogSmoke_Loss_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_input_signature(self)


    def output_signature(self):
        """output_signature(FogSmoke_Loss_ff_sptr self) -> io_signature_sptr"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_output_signature(self)


    def unique_id(self):
        """unique_id(FogSmoke_Loss_ff_sptr self) -> long"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_unique_id(self)


    def to_basic_block(self):
        """to_basic_block(FogSmoke_Loss_ff_sptr self) -> basic_block_sptr"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_to_basic_block(self)


    def check_topology(self, ninputs, noutputs):
        """check_topology(FogSmoke_Loss_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_check_topology(self, ninputs, noutputs)


    def alias(self):
        """alias(FogSmoke_Loss_ff_sptr self) -> std::string"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_alias(self)


    def set_block_alias(self, name):
        """set_block_alias(FogSmoke_Loss_ff_sptr self, std::string name)"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_set_block_alias(self, name)


    def _post(self, which_port, msg):
        """_post(FogSmoke_Loss_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr__post(self, which_port, msg)


    def message_ports_in(self):
        """message_ports_in(FogSmoke_Loss_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_message_ports_in(self)


    def message_ports_out(self):
        """message_ports_out(FogSmoke_Loss_ff_sptr self) -> swig_int_ptr"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_message_ports_out(self)


    def message_subscribers(self, which_port):
        """message_subscribers(FogSmoke_Loss_ff_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_message_subscribers(self, which_port)

FogSmoke_Loss_ff_sptr_swigregister = _FSO_Comm_swig.FogSmoke_Loss_ff_sptr_swigregister
FogSmoke_Loss_ff_sptr_swigregister(FogSmoke_Loss_ff_sptr)


FogSmoke_Loss_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
FogSmoke_Loss_ff = FogSmoke_Loss_ff.make;



